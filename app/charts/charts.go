package charts

import (
	"encoding/json"
	"fmt"
	"happy_bank_simulator/models"
	"io"
	"io/ioutil"
	"math/rand"
	"os"
	"strconv"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/components"
	"github.com/go-echarts/go-echarts/v2/opts"
)

// generate random data for bar chart
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func RenderChart() {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	f, _ := os.Create("app/charts/html/bar.html")
	bar.Render(f)
}

func GenerateJson() {
	loan := models.Loan{}
	loans := loan.List()

	var nodes []node
	var links []link

	for i, loan := range loans {
		loanName := fmt.Sprintf("Loan %s", strconv.Itoa(int(loan.ID)))
		loanNode := node{
			ItemStyle:  map[string]string{"color": "#c71969"},
			Name:       loanName,
			Y:          float64(i * 10),
			X:          float64(i * 10),
			SymbolSize: loan.Amount / 100000,
		}

		borrowerName := fmt.Sprintf("Borrower %s", strconv.Itoa(int(loan.BorrowerID)))
		borrowerNode := node{
			ItemStyle:  map[string]string{"color": "#c71969"},
			Name:       borrowerName,
			Y:          float64(i * 10),
			X:          float64(i * 10),
			SymbolSize: loan.Borrower.Balance / 100000,
		}

		lenderName := fmt.Sprintf("Lender %s", strconv.Itoa(int(loan.LenderID)))
		lenderNode := node{
			ItemStyle:  map[string]string{"color": "#c71969"},
			Name:       lenderName,
			Y:          float64(i * 10),
			X:          float64(i * 10),
			SymbolSize: loan.Lender.Balance / 100000,
		}

		insurerName := fmt.Sprintf("Insurer %s", strconv.Itoa(int(loan.InsurerID)))
		insurerNode := node{
			ItemStyle:  map[string]string{"color": "#c71969"},
			Name:       insurerName,
			Y:          float64(i * 10),
			X:          float64(i * 10),
			SymbolSize: loan.Lender.Balance / 100000,
		}

		nodes = append(nodes, loanNode, borrowerNode, lenderNode, insurerNode)

		borrowerToLoanLink := link{
			Source: borrowerName,
			Target: loanName,
		}

		lenderToLoanLink := link{
			Source: lenderName,
			Target: loanName,
		}

		insurerToLoanLink := link{
			Source: insurerName,
			Target: loanName,
		}

		links = append(links, borrowerToLoanLink, lenderToLoanLink, insurerToLoanLink)
	}

	graphData := graphData{
		Nodes: nodes,
		Links: links,
	}

	graphJson, _ := json.Marshal(graphData)
	_ = ioutil.WriteFile("app/charts/test.json", graphJson, 0644)

}

func graphNpmDep() *charts.Graph {
	graph := charts.NewGraph()
	graph.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title: "npm dependencies demo",
		}))

	f, err := ioutil.ReadFile("app/charts/test.json")
	if err != nil {
		panic(err)
	}

	var data Data
	if err := json.Unmarshal(f, &data); err != nil {
		fmt.Println(err)
	}

	graph.AddSeries("graph", data.Nodes, data.Links).
		SetSeriesOptions(
			charts.WithGraphChartOpts(opts.GraphChart{
				Layout:             "none",
				Roam:               true,
				FocusNodeAdjacency: true,
			}),
			charts.WithEmphasisOpts(opts.Emphasis{
				Label: &opts.Label{
					Show:     true,
					Color:    "black",
					Position: "left",
				},
			}),
			charts.WithLineStyleOpts(opts.LineStyle{
				Curveness: 0.3,
			}),
		)
	return graph
}

func graphBase() *charts.Graph {
	graph := charts.NewGraph()
	graph.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{Title: "basic graph example"}),
	)

	f, err := ioutil.ReadFile("app/charts/test.json")
	if err != nil {
		panic(err)
	}
	var data Data
	if err := json.Unmarshal(f, &data); err != nil {
		fmt.Println(err)
	}

	graph.AddSeries("graph", data.Nodes, data.Links,
		charts.WithGraphChartOpts(
			opts.GraphChart{Force: &opts.GraphForce{Repulsion: 8000}},
		),
	)
	return graph
}

func graphCircle() *charts.Graph {
	graph := charts.NewGraph()

	graph.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{Title: "Circular layout"}),
	)

	f, err := ioutil.ReadFile("app/charts/test.json")
	if err != nil {
		panic(err)
	}
	var data Data
	if err := json.Unmarshal(f, &data); err != nil {
		fmt.Println(err)
	}

	graph.AddSeries("graph", data.Nodes, data.Links).
		SetSeriesOptions(
			charts.WithGraphChartOpts(
				opts.GraphChart{
					Force:  &opts.GraphForce{Repulsion: 8000},
					Layout: "circular",
				}),
			charts.WithLabelOpts(opts.Label{Show: true, Position: "right"}),
		)
	return graph
}

func Examples() {
	page := components.NewPage()
	page.AddCharts(
		graphCircle(),
	)
	
	f, err := os.Create("app/charts/html/graph.html")
	if err != nil {
		panic(err)
		
	}

	page.Render(io.MultiWriter(f))
}